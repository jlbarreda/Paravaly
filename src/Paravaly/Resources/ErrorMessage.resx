<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ForArrayWithInvalidElements" xml:space="preserve">
    <value>The array contains one or more invalid elements.</value>
  </data>
  <data name="ForArrayWithNullElements" xml:space="preserve">
    <value>The array can't contain null elements.</value>
  </data>
  <data name="ForCollectionWithInvalidElements" xml:space="preserve">
    <value>The collection contains one or more invalid elements.</value>
  </data>
  <data name="ForCollectionWithNullElements" xml:space="preserve">
    <value>The collection can't contain null elements.</value>
  </data>
  <data name="ForContains" xml:space="preserve">
    <value>The parameter value should contain the text: '{0}'. Actual value: {1}.</value>
  </data>
  <data name="ForContainsKey" xml:space="preserve">
    <value>The dictionary should contain the key: '{0}'.</value>
  </data>
  <data name="ForDoesNotContain" xml:space="preserve">
    <value>The parameter value should not contain the text: '{0}'. Actual value: {1}.</value>
  </data>
  <data name="ForDoesNotEndWith" xml:space="preserve">
    <value>The parameter value should not end with the text '{0}'. Actual value: '{1}'.</value>
  </data>
  <data name="ForDoesNotStartWith" xml:space="preserve">
    <value>The parameter value should not start with the text '{0}'. Actual value: '{1}'.</value>
  </data>
  <data name="ForEmpty" xml:space="preserve">
    <value>The parameter should not be empty.</value>
  </data>
  <data name="ForEmptyArray" xml:space="preserve">
    <value>The array can't be empty.</value>
  </data>
  <data name="ForEmptyCollection" xml:space="preserve">
    <value>The collection can't be empty.</value>
  </data>
  <data name="ForEndsWith" xml:space="preserve">
    <value>The parameter value should end with the text '{0}'. Actual value: '{1}'.</value>
  </data>
  <data name="ForGreaterThan" xml:space="preserve">
    <value>The parameter should be greater than {0}. Actual value: {1}.</value>
  </data>
  <data name="ForGreaterThanOrEqualTo" xml:space="preserve">
    <value>The parameter should be greater than or equal to {0}. Actual value: {1}.</value>
  </data>
  <data name="ForInvalidLength" xml:space="preserve">
    <value>The parameter length is not valid. Actual Length: {0}. Expected Length: {1}.</value>
  </data>
  <data name="ForInvalidType" xml:space="preserve">
    <value>The parameter is not of type '{0}'. Actual type: {1}.</value>
  </data>
  <data name="ForIsClass" xml:space="preserve">
    <value>The parameter value is not a class type.</value>
  </data>
  <data name="ForIsEnum" xml:space="preserve">
    <value>The parameter value is not an enumeration.</value>
  </data>
  <data name="ForIsIn" xml:space="preserve">
    <value>The parameter value is not valid. Valid Values: {0}. Actual value: {1}.</value>
  </data>
  <data name="ForIsInterface" xml:space="preserve">
    <value>The parameter value is not an interface type.</value>
  </data>
  <data name="ForIsNotClass" xml:space="preserve">
    <value>The parameter value is a class type.</value>
  </data>
  <data name="ForIsNotEnum" xml:space="preserve">
    <value>The parameter value is an enumeration.</value>
  </data>
  <data name="ForIsNotIn" xml:space="preserve">
    <value>The parameter value is one of a list of invalid values. Invalid Values: {0}. Actual value: {1}.</value>
  </data>
  <data name="ForIsNotInfinity" xml:space="preserve">
    <value>The parameter value is infinity.</value>
  </data>
  <data name="ForIsNotInterface" xml:space="preserve">
    <value>The parameter value is an interface type.</value>
  </data>
  <data name="ForIsNotNegativeInfinity" xml:space="preserve">
    <value>The parameter value is negative infinity.</value>
  </data>
  <data name="ForIsNotPositiveInfinity" xml:space="preserve">
    <value>The parameter value is positive infinity.</value>
  </data>
  <data name="ForIsNotRegexMatch" xml:space="preserve">
    <value>The parameter value doesn't match the regular expression. Regular Expression: {0}. Actual value: {1}.</value>
  </data>
  <data name="ForIsNotValueType" xml:space="preserve">
    <value>The parameter value is a value type.</value>
  </data>
  <data name="ForIsValidEnum" xml:space="preserve">
    <value>The parameter value is not valid for enumeration type '{0}'. Actual value: {1}.</value>
  </data>
  <data name="ForIsValueType" xml:space="preserve">
    <value>The parameter value is not a value type.</value>
  </data>
  <data name="ForLessThan" xml:space="preserve">
    <value>The parameter should be less than {0}. Actual value: {1}.</value>
  </data>
  <data name="ForLessThanOrEqualTo" xml:space="preserve">
    <value>The parameter should be less than or equal to {0}. Actual value: {1}.</value>
  </data>
  <data name="ForNaN" xml:space="preserve">
    <value>The parameter value is not a number.</value>
  </data>
  <data name="ForNotAssignableType" xml:space="preserve">
    <value>The parameter type is not assignable to type '{0}'. Actual type: {1}.</value>
  </data>
  <data name="ForNotEqualString" xml:space="preserve">
    <value>The parameter should be different from '{0}'. Actual type: {1}.</value>
  </data>
  <data name="ForOutOfRange" xml:space="preserve">
    <value>The parameter is outside the allowable range of values. Minimum: {0}. Maximum: {1}. Actual value: {2}.</value>
  </data>
  <data name="ForOutOfRangeCount" xml:space="preserve">
    <value>The parameter count is outside the allowable range of values. Minimum: {0}. Maximum: {1}. Actual value: {2}.</value>
  </data>
  <data name="ForOutOfRangeLength" xml:space="preserve">
    <value>The parameter length is outside the allowable range of values. Minimum: {0}. Maximum: {1}. Actual value: {2}.</value>
  </data>
  <data name="ForStartsWith" xml:space="preserve">
    <value>The parameter value should start with the text '{0}'. Actual value: '{1}'.</value>
  </data>
  <data name="ForWhiteSpace" xml:space="preserve">
    <value>The parameter should not contain white space only.</value>
  </data>
</root>